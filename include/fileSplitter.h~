/*!
 * @file fileSplitter.h
 * @brief Class used to manage storing of big data in several files
 * @author Sign Coding Dwarf
 * @version 1.0
 * @date 15 May 2016
 *
 * Definition of the class used to store a big set of data in multiple subfiles to get smaller files and avoid too much data loss due to file corruption or program bugs.
 * The amount of data to store is determined by the number of call to operator<<. User may also manually trigger a file change. <br>
 * To test if it is available with your library version use <br>
 * \a \#if \a DWFUTILS_VERSION_NUMERIC>=111552336
 *
 */

/* 
Copyright 2016 SignCodingDwarf

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


#ifndef FILESPLITTER
#define FILESPLITTER

#include <iostream>
#include <fstream>
#include <string>

#include "common_defines.h"
#include "convUtils.h"

/*! 
* @namespace dwf_utils
* @brief A namespace used to regroup all utilitary functions or classes spanning through multiple applications
*/
namespace dwf_utils
{
	/*! \class fileSplitter
	* \brief Class allowing an automatic separation of a big file writing into smaller files
	*
	* Class used to automatically split writing into several files to reduce the impact of file corruption or program bugs.
	* 
	*/
	class fileSplitter
	{
	public:
		/*!
		* @brief Constructor of the fileSplitter class
		* @param baseName : base name of the files. All files wil be named baseName_<Id>.extension
		* @param extension : extension of the files. All files wil be named baseName_<Id>.extension. Dot is automatically added befor extension if not present.
		* @param fileSize : Maximum number of operator<< calls before triggering writing to a new file
		*
		* Constructor of the fileSplitter class allowing to initialize our class and open the baseName_0.extension file. 
		*
		*/
		fileSplitter(std::string baseName, std::string extension, unsigned long fileSize);  

		/*!
		* @brief Destructor of the fileSplitter class
		*
		* Destructor of the fileSplitter class. Closes the last file if it is opened.
		* Virtual function.
		*
		*/
		virtual ~fileSplitter();

		/*!
		* @brief Perform change file to which write
		*
		* Perform change file from the file named baseName_<Id>.extension to the file named baseName_<Id+1>.extension. This method is automatically called in operator<< when the number of operator<< calls reaches the desired limit. But the user may also trigger changes by himself.
		* Virtual function.
		*
		*/
		virtual int changeFile();

		/*!
		* @brief Know if file is available for writing
		* @return TRUE if file can be used for writing and FALSE otherwise
		*
		* Know if file is available for writing and especially if the ofstream flux is valid.
		* Constant function.
		*
		*/
		bool getStatus() const;

		/*!
		* @brief Declaration of operator<<
		* @tparam T : type of the data to wrtie
		* @param data : data to write in file
		* @return A reference to the modified fileSplitter object allow to channel multiple insertion in flux
		*
		* operator<< allowing to write into our splitted files and checks if file change must be performed. T must contain operator<<.
		*
		*/
		template <class T>
		fileSplitter& operator<<(T const& data)
		{
			if(m_status)
			{
		    		m_file << data;
				++m_written;
				if(m_written >= m_fileSize)
				{
					changeFile() == EXEC_FAILURE && (m_status = false); 
				}
			}
			return *this;
		}

		/*!
		* @brief Overload of operator<<
		* @param pf : functor on a manipulator of ostream fluxes.
		* @return A reference to the modified fileSplitter object allowing to channel multiple insertion in flux
		*
		* Overload of operator<< allowing to use manipulators such as endl.
		*
		*/
		fileSplitter& operator<<(std::ostream& (*pf)(std::ostream&))
		{
			if(m_status)
			{
		    		pf(m_file);
				++m_written;
				if(m_written >= m_fileSize)
				{
					changeFile() == EXEC_FAILURE && (m_status = false); 
				}
			}
			return *this;
		}


	protected:
		std::ofstream m_file; /*!< Flux to file */
		std::string m_baseName; /*!< Base name of files */
		std::string m_extension; /*!< Extension of files */
		unsigned long m_fileSize; /*!< Maximal number of operator<< calls */
		unsigned long m_written; /*!< Current number of operator<< calls */
		unsigned long m_fileNb; /*!< Number of files already complete */
		bool m_status; /*!< Indicates status of class */

		/*!
		* @brief Add dot to extension
		*
		* Check if file extension starts with a dot and add it if its not the case.
		*
		*/
		void addDot();
	};
}

#endif

//  ______________________________
// |                              |
// |    ______________________    |
// |   |                      |   |
// |   |         sign         |   |
// |   |        coding        |   |
// |   |        dw@rf         |   |
// |   |         1.0          |   |
// |   |______________________|   |
// |                              |
// |______________________________|
//               |  |           
//               |  |             
//               |  |
//               |  |
//               |  |
//               |  |
//               |  |
//               |  |
//               |  |
//               |  |
//               |  |
//               |__|
